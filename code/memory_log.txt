==30817== Memcheck, a memory error detector
==30817== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==30817== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==30817== Command: ./exec
==30817== 
==13983== Invalid read of size 1
==13983==    at 0x10EA8F: parser (parser.c:24)
==13983==    by 0x10E8BB: main (main.c:31)
==13983==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==13983== 
==13983== 
==13983== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==13983==  Access not within mapped region at address 0x0
==13983==    at 0x10EA8F: parser (parser.c:24)
==13983==    by 0x10E8BB: main (main.c:31)
==13983==  If you believe this happened as a result of a stack
==13983==  overflow in your program's main thread (unlikely but
==13983==  possible), you can try to increase the size of the
==13983==  main thread stack using the --main-stacksize= flag.
==13983==  The main thread stack size used in this run was 8388608.
==13996== 
==13996== HEAP SUMMARY:
==13996==     in use at exit: 10,896 bytes in 3 blocks
==13996==   total heap usage: 4 allocs, 1 frees, 14,992 bytes allocated
==13996== 
==13996== LEAK SUMMARY:
==13996==    definitely lost: 10,240 bytes in 1 blocks
==13996==    indirectly lost: 0 bytes in 0 blocks
==13996==      possibly lost: 0 bytes in 0 blocks
==13996==    still reachable: 656 bytes in 2 blocks
==13996==         suppressed: 0 bytes in 0 blocks
==13996== Rerun with --leak-check=full to see details of leaked memory
==13996== 
==13996== For lists of detected and suppressed errors, rerun with: -s
==13996== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
x10F32B: parse_hash (parser.c:161)
==30817==    by 0x10EA59: parser (parser.c:38)
==30817==    by 0x10E8BB: main (main.c:31)
==30817== 
==30817== HEAP SUMMARY:
==30817==     in use at exit: 10,896 bytes in 3 blocks
==30817==   total heap usage: 4 allocs, 1 frees, 11,920 bytes allocated
==30817== 
==30817== LEAK SUMMARY:
==30817==    definitely lost: 0 bytes in 0 blocks
==30817==    indirectly lost: 0 bytes in 0 blocks
==30817==      possibly lost: 0 bytes in 0 blocks
==30817==    still reachable: 10,896 bytes in 3 blocks
==30817==         suppressed: 0 bytes in 0 blocks
==30817== Rerun with --leak-check=full to see details of leaked memory
==30817== 
==30817== For lists of detected and suppressed errors, rerun with: -s
==30817== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)
